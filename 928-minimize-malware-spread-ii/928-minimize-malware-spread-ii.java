class Solution {
    private int dfs(int[][] graph, int u, int parent, int time, int[] depth, int[] low, boolean[] infected, int[] count) {
        low[u] = depth[u] = time;
        boolean flag = infected[u];
        int size = 1;
        for(int v = 0; v < graph[u].length; v++) {
            if(graph[u][v] == 1) {
                if(depth[v] == 0) {
                    int s = dfs(graph, v, u, time + 1, depth, low, infected, count);
                    if(s == 0) {
                        flag = true;
                    } else {
                        size += s;
                    }
                    if(low[v] >= depth[u]) {
                        count[u] += s;
                    }
                    low[u] = Math.min(low[u], low[v]);
                } else if(v != parent) {
                    low[u] = Math.min(low[u], depth[v]);
                }
            }
        }
        return flag ? 0 : size;
    }
    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n = graph.length, ans = initial[0], max = 0;
        boolean[] infected = new boolean[n];
        for(int u: initial) infected[u] = true;
        int[] depth = new int[n], low = new int[n], count = new int[n];
        for(int u: initial) {
            if(depth[u] == 0) {
                dfs(graph, u, -1, 1, depth, low, infected, count);
            }
            if(count[u] > max || count[u] == max && u < ans) {
                max = count[u];
                ans = u;
            }
        }
        return ans;
    }
}